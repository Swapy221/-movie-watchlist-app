{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Swapy\\\\Desktop\\\\Git Clone\\\\movie-watchlist-app\\\\src\\\\contexts\\\\MovieContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovieContext = /*#__PURE__*/createContext(undefined);\nexport const MovieProvider = ({\n  children\n}) => {\n  _s();\n  const [watchlist, setWatchlist] = useState({});\n  useEffect(() => {\n    const storedWatchlist = localStorage.getItem('watchlist');\n    if (storedWatchlist) {\n      setWatchlist(JSON.parse(storedWatchlist));\n    }\n  }, []);\n  const addToWatchlist = (email, movie) => {\n    setWatchlist(prev => {\n      const newWatchlist = {\n        ...prev,\n        [email]: [...(prev[email] || []), movie]\n      };\n      localStorage.setItem('watchlist', JSON.stringify(newWatchlist));\n      return newWatchlist;\n    });\n  };\n  const removeFromWatchlist = (email, movieId) => {\n    setWatchlist(prev => {\n      const newWatchlist = {\n        ...prev,\n        [email]: prev[email].filter(movie => movie.imdbID !== movieId)\n      };\n      localStorage.setItem('watchlist', JSON.stringify(newWatchlist));\n      return newWatchlist;\n    });\n  };\n  const searchMovies = async query => {\n    const response = await fetch(`http://www.omdbapi.com/?apikey=2853c232&s=${query}`);\n    const data = await response.json();\n    return data.Search || [];\n  };\n  const getMovieDetails = async id => {\n    const response = await fetch(`http://www.omdbapi.com/?apikey=2853c232&i=${id}`);\n    const data = await response.json();\n    return data;\n  };\n  return /*#__PURE__*/_jsxDEV(MovieContext.Provider, {\n    value: {\n      watchlist,\n      addToWatchlist,\n      removeFromWatchlist,\n      searchMovies,\n      getMovieDetails\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieProvider, \"mmh0u8B4+CR3N8mgoTA3nZaRfdY=\");\n_c = MovieProvider;\nexport const useMovie = () => {\n  _s2();\n  const context = useContext(MovieContext);\n  if (context === undefined) {\n    throw new Error('useMovie must be used within a MovieProvider');\n  }\n  return context;\n};\n_s2(useMovie, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"MovieProvider\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","_s2","React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","MovieContext","undefined","MovieProvider","children","watchlist","setWatchlist","storedWatchlist","localStorage","getItem","JSON","parse","addToWatchlist","email","movie","prev","newWatchlist","setItem","stringify","removeFromWatchlist","movieId","filter","imdbID","searchMovies","query","response","fetch","data","json","Search","getMovieDetails","id","Provider","value","fileName","lineNumber","columnNumber","_c","useMovie","context","Error","$RefreshReg$"],"sources":["C:/Users/Swapy/Desktop/Git Clone/movie-watchlist-app/src/contexts/MovieContext.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport React, { createContext, useState, useContext, useEffect } from 'react'\r\n\r\ninterface Movie {\r\n  imdbID: string\r\n  Title: string\r\n  Year: string\r\n  Poster: string\r\n}\r\n\r\ninterface MovieContextType {\r\n  watchlist: { [email: string]: Movie[] }\r\n  addToWatchlist: (email: string, movie: Movie) => void\r\n  removeFromWatchlist: (email: string, movieId: string) => void\r\n  searchMovies: (query: string) => Promise<Movie[]>\r\n  getMovieDetails: (id: string) => Promise<Movie>\r\n}\r\n\r\nconst MovieContext = createContext<MovieContextType | undefined>(undefined)\r\n\r\nexport const MovieProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [watchlist, setWatchlist] = useState<{ [email: string]: Movie[] }>({})\r\n\r\n  useEffect(() => {\r\n    const storedWatchlist = localStorage.getItem('watchlist')\r\n    if (storedWatchlist) {\r\n      setWatchlist(JSON.parse(storedWatchlist))\r\n    }\r\n  }, [])\r\n\r\n  const addToWatchlist = (email: string, movie: Movie) => {\r\n    setWatchlist((prev) => {\r\n      const newWatchlist = {\r\n        ...prev,\r\n        [email]: [...(prev[email] || []), movie],\r\n      }\r\n      localStorage.setItem('watchlist', JSON.stringify(newWatchlist))\r\n      return newWatchlist\r\n    })\r\n  }\r\n\r\n  const removeFromWatchlist = (email: string, movieId: string) => {\r\n    setWatchlist((prev) => {\r\n      const newWatchlist = {\r\n        ...prev,\r\n        [email]: prev[email].filter((movie) => movie.imdbID !== movieId),\r\n      }\r\n      localStorage.setItem('watchlist', JSON.stringify(newWatchlist))\r\n      return newWatchlist\r\n    })\r\n  }\r\n\r\n  const searchMovies = async (query: string): Promise<Movie[]> => {\r\n    const response = await fetch(`http://www.omdbapi.com/?apikey=2853c232&s=${query}`)\r\n    const data = await response.json()\r\n    return data.Search || []\r\n  }\r\n\r\n  const getMovieDetails = async (id: string): Promise<Movie> => {\r\n    const response = await fetch(`http://www.omdbapi.com/?apikey=2853c232&i=${id}`)\r\n    const data = await response.json()\r\n    return data\r\n  }\r\n\r\n  return (\r\n    <MovieContext.Provider\r\n      value={{ watchlist, addToWatchlist, removeFromWatchlist, searchMovies, getMovieDetails }}\r\n    >\r\n      {children}\r\n    </MovieContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useMovie = () => {\r\n  const context = useContext(MovieContext)\r\n  if (context === undefined) {\r\n    throw new Error('useMovie must be used within a MovieProvider')\r\n  }\r\n  return context\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}